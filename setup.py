#!/usr/bin/env python3
"""
Interactive Setup Script for Betting MLOps System
Helps configure environment variables and credentials
"""
import os
import secrets
import subprocess
import sys
from pathlib import Path

def print_banner():
    print("üöÄ MLOps Stock Prediction System Setup")
    print("=" * 50)
    print("This script will help you configure the necessary credentials")
    print("and environment variables for the system.\n")

def check_file_exists(file_path):
    """Check if a file exists"""
    return Path(file_path).exists()

def generate_secret_key():
    """Generate a secure JWT secret key"""
    return secrets.token_hex(32)

def get_user_input(prompt, default="", required=False, secret=False):
    """Get user input with validation"""
    while True:
        if secret:
            import getpass
            value = getpass.getpass(f"{prompt}: ") or default
        else:
            if default:
                value = input(f"{prompt} [{default}]: ") or default
            else:
                value = input(f"{prompt}: ") or default
        
        if required and not value:
            print("‚ùå This field is required. Please enter a value.")
            continue
        
        return value

def test_database_connection():
    """Test if PostgreSQL is running locally"""
    try:
        import psycopg2
        conn = psycopg2.connect(
            host="localhost",
            port="5432", 
            user="postgres",
            password="postgres_password",
            database="postgres"
        )
        conn.close()
        return True
    except:
        return False

def test_redis_connection():
    """Test if Redis is running locally"""
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, decode_responses=True)
        r.ping()
        return True
    except:
        return False

def setup_environment_file():
    """Set up the .env file with user input"""
    print("\nüìù Setting up environment configuration...")
    
    # Copy example file if .env doesn't exist
    if not check_file_exists(".env"):
        if check_file_exists(".env.example"):
            subprocess.run(["cp", ".env.example", ".env"])
            print("‚úÖ Created .env file from template")
        else:
            print("‚ùå .env.example not found!")
            return False
    
    # Read existing .env file
    env_vars = {}
    try:
        with open(".env", "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    # Remove quotes if present
                    value = value.strip('"').strip("'")
                    env_vars[key] = value
    except FileNotFoundError:
        print("‚ùå Could not read .env file")
        return False
    
    print("\nüîë Required Credentials Setup:")
    print("You can skip any optional ones by pressing Enter\n")
    
    # Required credentials
    openai_key = get_user_input(
        "OpenAI API Key (required for LLM features)", 
        env_vars.get("OPENAI_API_KEY", ""),
        required=True,
        secret=True
    )
    env_vars["OPENAI_API_KEY"] = openai_key
    
    # Optional but recommended
    news_key = get_user_input(
        "News API Key (free at newsapi.org, recommended)", 
        env_vars.get("NEWS_API_KEY", ""),
        secret=True
    )
    if news_key:
        env_vars["NEWS_API_KEY"] = news_key
    
    alpha_key = get_user_input(
        "Alpha Vantage API Key (optional, free at alphavantage.co)", 
        env_vars.get("ALPHA_VANTAGE_API_KEY", ""),
        secret=True
    )
    if alpha_key:
        env_vars["ALPHA_VANTAGE_API_KEY"] = alpha_key
    
    # Generate JWT secret if empty
    if not env_vars.get("JWT_SECRET_KEY"):
        env_vars["JWT_SECRET_KEY"] = generate_secret_key()
        print("‚úÖ Generated secure JWT secret key")
    
    # Write back to .env file
    try:
        with open(".env", "w") as f:
            f.write("# MLOps Stock Prediction System Configuration\n")
            f.write("# Generated by setup.py\n\n")
            
            # Write all environment variables
            for key, value in env_vars.items():
                f.write(f'{key}="{value}"\n')
        
        print("‚úÖ Environment file configured successfully")
        return True
    except Exception as e:
        print(f"‚ùå Failed to write .env file: {e}")
        return False

def check_dependencies():
    """Check if required dependencies are installed"""
    print("\nüîç Checking Dependencies...")
    
    required_packages = [
        "fastapi", "uvicorn", "openai", "redis", "psycopg2-binary",
        "sqlalchemy", "yfinance", "pandas", "numpy", "scikit-learn"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} (missing)")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüì¶ Missing packages: {', '.join(missing_packages)}")
        install = get_user_input("Install missing packages now? (y/n)", "y")
        
        if install.lower() in ['y', 'yes']:
            try:
                subprocess.run([
                    sys.executable, "-m", "pip", "install"
                ] + missing_packages, check=True)
                print("‚úÖ Packages installed successfully")
            except subprocess.CalledProcessError:
                print("‚ùå Failed to install packages")
                return False
    
    return True

def check_services():
    """Check if required services are running"""
    print("\nüîß Checking Local Services...")
    
    # Check PostgreSQL
    if test_database_connection():
        print("‚úÖ PostgreSQL is running")
    else:
        print("‚ùå PostgreSQL not running or not accessible")
        print("   Start with: docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres_password postgres:13")
    
    # Check Redis  
    if test_redis_connection():
        print("‚úÖ Redis is running")
    else:
        print("‚ùå Redis not running or not accessible")
        print("   Start with: docker run -d --name redis -p 6379:6379 redis:7")

def setup_terraform():
    """Set up Terraform configuration"""
    print("\nüèóÔ∏è  Setting up Terraform configuration...")
    
    terraform_dir = Path("infrastructure")
    if not terraform_dir.exists():
        print("‚ùå Infrastructure directory not found")
        return False
    
    tfvars_example = terraform_dir / "terraform.tfvars.example"
    tfvars_file = terraform_dir / "terraform.tfvars"
    
    if not tfvars_file.exists() and tfvars_example.exists():
        subprocess.run(["cp", str(tfvars_example), str(tfvars_file)])
        print("‚úÖ Created terraform.tfvars from template")
        print(f"üìù Edit {tfvars_file} with your AWS configuration")
    
    return True

def main():
    """Main setup function"""
    print_banner()
    
    # Change to script directory
    os.chdir(Path(__file__).parent)
    
    steps = [
        ("Environment Configuration", setup_environment_file),
        ("Dependencies", check_dependencies), 
        ("Local Services", check_services),
        ("Terraform Setup", setup_terraform),
    ]
    
    for step_name, step_func in steps:
        print(f"\n{'='*20} {step_name} {'='*20}")
        try:
            success = step_func()
            if not success:
                print(f"‚ùå {step_name} failed")
                break
        except KeyboardInterrupt:
            print("\n‚ùå Setup interrupted by user")
            return
        except Exception as e:
            print(f"‚ùå {step_name} failed with error: {e}")
            return
    
    print("\n" + "="*60)
    print("üéâ Setup Complete!")
    print("\nNext steps:")
    print("1. Start local services if not running:")
    print("   docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres_password postgres:13")
    print("   docker run -d --name redis -p 6379:6379 redis:7")
    print("\n2. Test the application:")
    print("   python3 src/api/production_api.py")
    print("\n3. For AWS deployment:")
    print("   cd infrastructure/")
    print("   terraform init")
    print("   terraform plan")
    print("   terraform apply")
    
    print(f"\nüìñ API Documentation: http://localhost:8000/docs")

if __name__ == "__main__":
    main()