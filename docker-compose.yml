services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: mlops-postgresql
    environment:
      POSTGRES_DB: betting_mlops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlops-network

  # Redis Cache & Feature Store
  redis:
    image: redis:7-alpine
    container_name: mlops-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mlops-network

  # MinIO (S3-compatible storage for MLflow)
  minio:
    image: minio/minio:latest
    container_name: mlops-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mlops-network

  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    container_name: mlops-mlflow
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
    ports:
      - "5000:5000"
    command: >
      bash -c "
      pip install mlflow psycopg2-binary boto3 &&
      mlflow server 
        --backend-store-uri postgresql://postgres:postgres_password@postgresql:5432/betting_mlops 
        --default-artifact-root s3://mlflow/artifacts/ 
        --host 0.0.0.0 
        --port 5000
      "
    depends_on:
      - postgresql
      - minio
    networks:
      - mlops-network

  # FastAPI Application
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: mlops-api
    environment:
      DATABASE_URL: postgresql://postgres:postgres_password@postgresql:5432/betting_mlops
      REDIS_URL: redis://redis:6379
      MLFLOW_TRACKING_URI: http://mlflow:5000
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      KALSHI_API_KEY: ${KALSHI_API_KEY:-}
    ports:
      - "8000:8000"
    depends_on:
      - postgresql
      - redis
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mlops-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - mlops-network

volumes:
  postgresql_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  mlops-network:
    driver: bridge