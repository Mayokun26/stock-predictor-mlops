name: MLOps CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
    - 'src/**'
    - 'models/**'
    - 'requirements/**'
    - 'Dockerfile'
    - 'docker-compose.yml'
    - 'k8s/**'
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mlops-stock-predictor

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_mlops
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 src/ --max-line-length=120 --ignore=E203,W503
        black --check src/
        isort --check-only src/

    - name: Run type checking
      run: |
        pip install mypy
        mypy src/ --ignore-missing-imports

    - name: Run unit tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_mlops
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  model-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate model artifacts
      run: |
        python -m src.models.validate_models

    - name: Run model performance tests
      run: |
        python -m pytest tests/models/ -v

    - name: Check model size constraints
      run: |
        python -c "
        import os
        max_size = 100 * 1024 * 1024  # 100MB
        for root, dirs, files in os.walk('models/'):
            for file in files:
                if file.endswith('.pkl'):
                    path = os.path.join(root, file)
                    size = os.path.getsize(path)
                    if size > max_size:
                        raise Exception(f'Model {path} exceeds size limit: {size} bytes')
        print('All models within size constraints')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true

  build:
    runs-on: ubuntu-latest
    needs: [test, model-validation, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to staging
      run: |
        kubectl apply -k k8s/dev/
        kubectl rollout status deployment/mlops-api -n mlops-system --timeout=600s

    - name: Run integration tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Get service endpoint
        STAGING_URL=$(kubectl get service mlops-api -n mlops-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run integration tests
        python -m pytest tests/integration/ --base-url="http://${STAGING_URL}:8000" -v

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Staging deployment ${{ job.status }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config

    - name: Deploy to production with blue-green strategy
      run: |
        # Deploy to green environment
        kubectl apply -k k8s/prod/
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/mlops-api-green -n mlops-system --timeout=600s
        
        # Run smoke tests on green environment
        GREEN_URL=$(kubectl get service mlops-api-green -n mlops-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        python -m pytest tests/smoke/ --base-url="http://${GREEN_URL}:8000" -v
        
        # Switch traffic to green
        kubectl patch service mlops-api -n mlops-system -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and verify
        sleep 60
        
        # Scale down blue environment
        kubectl scale deployment mlops-api-blue -n mlops-system --replicas=0

    - name: Update model monitoring
      run: |
        # Update Grafana dashboards
        kubectl apply -f monitoring/dashboards/
        
        # Update Prometheus alerts
        kubectl apply -f monitoring/alerts/

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          ðŸš€ Production deployment ${{ job.status }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Dashboard: https://grafana.company.com/d/mlops-overview
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run end-to-end tests
      run: |
        PROD_URL="https://api.company.com"
        python -m pytest tests/e2e/ --base-url="${PROD_URL}" -v

    - name: Performance benchmark
      run: |
        pip install locust
        locust -f tests/load/locustfile.py --host=https://api.company.com \
               --users=50 --spawn-rate=5 --run-time=300s --headless \
               --html=load-test-report.html

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: |
          load-test-report.html
          test-results/